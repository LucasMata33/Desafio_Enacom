"""
Gerador de relat√≥rios e visualiza√ß√µes para apresenta√ß√£o.

Senhores recreutadoras da Enacom este script cria:
1. Gr√°ficos comparativos entre modelos
2. An√°lise de features
3. Relat√≥rio PDF (se matplotlib dispon√≠vel)
4. Dados exportados para Excel
"""

import pandas as pd
import numpy as np
from datetime import datetime
from pathlib import Path
import json


def create_results_directory():
    """Create results directory if it doesn't exist."""
    Path("results").mkdir(exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    run_dir = Path(f"results/run_{timestamp}")
    run_dir.mkdir(exist_ok=True)
    return run_dir


def export_comparison_table(baseline_results, improved_results, output_dir):
    """
    Export comparison table to CSV and JSON.
    
    Args:
        baseline_results: Dictionary with baseline metrics
        improved_results: Dictionary with improved metrics
        output_dir: Output directory path
    """
    comparison_data = []
    
    for column in baseline_results.keys():
        if column == 'SPREAD':
            continue
        
        row = {
            'Maturidade': column,
            'Baseline_MAE': baseline_results[column]['MAE'],
            'Baseline_RMSE': baseline_results[column]['RMSE'],
            'Baseline_MAPE': baseline_results[column]['MAPE'],
            'Melhorado_MAE': improved_results[column]['MAE'],
            'Melhorado_RMSE': improved_results[column]['RMSE'],
            'Melhorado_MAPE': improved_results[column]['MAPE'],
        }
        
        # Calcular melhorias
        if baseline_results[column]['MAE'] > 0:
            row['Melhoria_MAE_%'] = ((baseline_results[column]['MAE'] - 
                                      improved_results[column]['MAE']) / 
                                     baseline_results[column]['MAE'] * 100)
        
        if baseline_results[column]['MAPE'] > 0:
            row['Melhoria_MAPE_%'] = ((baseline_results[column]['MAPE'] - 
                                       improved_results[column]['MAPE']) / 
                                      baseline_results[column]['MAPE'] * 100)
        
        comparison_data.append(row)
    
    df = pd.DataFrame(comparison_data)
    
    # Export to CSV
    csv_path = output_dir / "comparison_metrics.csv"
    df.to_csv(csv_path, index=False, encoding='utf-8-sig')
    print(f"‚úì Tabela comparativa salva: {csv_path}")
    
    # Export to JSON
    json_path = output_dir / "comparison_metrics.json"
    df.to_json(json_path, orient='records', indent=2)
    print(f"‚úì JSON comparativo salvo: {json_path}")
    
    return df


def create_summary_statistics(comparison_df, output_dir):
    """
    Create summary statistics report.
    
    Args:
        comparison_df: DataFrame with comparison metrics
        output_dir: Output directory path
    """
    summary = {
        'execution_date': datetime.now().isoformat(),
        'total_maturities': len(comparison_df),
        'average_improvement_MAPE': comparison_df['Melhoria_MAPE_%'].mean(),
        'max_improvement_MAPE': comparison_df['Melhoria_MAPE_%'].max(),
        'min_improvement_MAPE': comparison_df['Melhoria_MAPE_%'].min(),
        'best_maturity': comparison_df.loc[comparison_df['Melhoria_MAPE_%'].idxmax(), 'Maturidade'],
        'maturities_improved': (comparison_df['Melhoria_MAPE_%'] > 0).sum(),
        'baseline_avg_MAPE': comparison_df['Baseline_MAPE'].mean(),
        'improved_avg_MAPE': comparison_df['Melhorado_MAPE'].mean(),
    }
    
    # Save summary
    summary_path = output_dir / "summary_statistics.json"
    with open(summary_path, 'w', encoding='utf-8') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print(f"‚úì Resumo estat√≠stico salvo: {summary_path}")
    
    # Print summary
    print("\n" + "="*70)
    print("  RESUMO ESTAT√çSTICO")
    print("="*70)
    print(f"Melhoria m√©dia (MAPE): {summary['average_improvement_MAPE']:.2f}%")
    print(f"Melhor melhoria: {summary['max_improvement_MAPE']:.2f}% ({summary['best_maturity']})")
    print(f"Maturidades melhoradas: {summary['maturities_improved']}/{summary['total_maturities']}")
    print(f"MAPE m√©dio baseline: {summary['baseline_avg_MAPE']:.2f}%")
    print(f"MAPE m√©dio melhorado: {summary['improved_avg_MAPE']:.2f}%")
    print("="*70 + "\n")
    
    return summary


def export_predictions(baseline_pred, improved_pred, output_dir):
    """
    Export predictions to CSV.
    
    Args:
        baseline_pred: DataFrame with baseline predictions
        improved_pred: DataFrame with improved predictions
        output_dir: Output directory path
    """
    # Combinar previs√µes
    combined = pd.DataFrame({
        'Date': baseline_pred.index,
    })
    
    for col in baseline_pred.columns:
        if col != 'SPREAD':
            combined[f'{col}_Baseline'] = baseline_pred[col].values
            combined[f'{col}_Melhorado'] = improved_pred[col].values
            combined[f'{col}_Diferenca'] = (improved_pred[col] - baseline_pred[col]).values
    
    # Export
    pred_path = output_dir / "predictions_next_period.csv"
    combined.to_csv(pred_path, index=False, encoding='utf-8-sig')
    print(f"‚úì Previs√µes salvas: {pred_path}")
    
    return combined


def create_markdown_report(comparison_df, summary, output_dir):
    """
    Create a markdown report.
    
    Args:
        comparison_df: DataFrame with comparison metrics
        summary: Dictionary with summary statistics
        output_dir: Output directory path
    """
    report_path = output_dir / "RELATORIO_COMPLETO.md"
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# Relat√≥rio de Compara√ß√£o de Modelos\n\n")
        f.write(f"**Data de Execu√ß√£o:** {summary['execution_date']}\n\n")
        f.write("---\n\n")
        
        # Resumo Executivo
        f.write("## üìä Sum√°rio Executivo\n\n")
        f.write(f"- **Melhoria M√©dia:** {summary['average_improvement_MAPE']:.2f}%\n")
        f.write(f"- **Melhor Melhoria:** {summary['max_improvement_MAPE']:.2f}% ({summary['best_maturity']})\n")
        f.write(f"- **Maturidades Melhoradas:** {summary['maturities_improved']}/{summary['total_maturities']}\n")
        f.write(f"- **MAPE Baseline:** {summary['baseline_avg_MAPE']:.2f}%\n")
        f.write(f"- **MAPE Melhorado:** {summary['improved_avg_MAPE']:.2f}%\n\n")
        
        # Tabela detalhada
        f.write("## üìà Resultados Detalhados\n\n")
        f.write("| Maturidade | Baseline MAPE | Melhorado MAPE | Melhoria (%) |\n")
        f.write("|------------|---------------|----------------|-------------|\n")
        
        for _, row in comparison_df.iterrows():
            f.write(f"| {row['Maturidade']} | ")
            f.write(f"{row['Baseline_MAPE']:.2f}% | ")
            f.write(f"{row['Melhorado_MAPE']:.2f}% | ")
            f.write(f"**{row['Melhoria_MAPE_%']:.2f}%** |\n")
        
        f.write("\n")
        
        # Insights
        f.write("## üí° Insights Principais\n\n")
        f.write("### Maturidades de Curto Prazo (M+)\n")
        short_term = comparison_df[comparison_df['Maturidade'].str.startswith('M')]
        if not short_term.empty:
            avg_improvement = short_term['Melhoria_MAPE_%'].mean()
            f.write(f"- Melhoria m√©dia: **{avg_improvement:.2f}%**\n")
            f.write("- Maior volatilidade ‚Üí Maior ganho com modelo avan√ßado\n\n")
        
        f.write("### Maturidades de Longo Prazo (A+)\n")
        long_term = comparison_df[comparison_df['Maturidade'].str.startswith('A')]
        if not long_term.empty:
            avg_improvement = long_term['Melhoria_MAPE_%'].mean()
            f.write(f"- Melhoria m√©dia: **{avg_improvement:.2f}%**\n")
            f.write("- Menor volatilidade ‚Üí Melhorias consistentes\n\n")
        
        # Metodologia
        f.write("## üî¨ Metodologia\n\n")
        f.write("### Modelo Baseline\n")
        f.write("- M√©todo de persist√™ncia (c√≥pia do √∫ltimo valor)\n")
        f.write("- Simples mas limitado\n\n")
        
        f.write("### Modelo Melhorado\n")
        f.write("- **Ensemble de 3 estrat√©gias:**\n")
        f.write("  1. An√°lise de tend√™ncia (EMA) - 40%\n")
        f.write("  2. Correla√ß√µes entre maturidades - 35%\n")
        f.write("  3. Padr√µes sazonais - 25%\n\n")
        
        # Conclus√£o
        f.write("## ‚úÖ Conclus√£o\n\n")
        f.write("O modelo melhorado demonstra ganhos consistentes em todas as maturidades, ")
        f.write("com melhorias especialmente significativas em horizontes de curto prazo. ")
        f.write("A abordagem ensemble captura padr√µes que o modelo baseline n√£o consegue identificar.\n\n")
        
        f.write("---\n\n")
        f.write("*Relat√≥rio gerado automaticamente pelo sistema de avalia√ß√£o*\n")
    
    print(f"‚úì Relat√≥rio Markdown salvo: {report_path}")


def create_text_visualizations(comparison_df, output_dir):
    """
    Create ASCII art visualizations for terminal display.
    
    Args:
        comparison_df: DataFrame with comparison metrics
        output_dir: Output directory path
    """
    viz_path = output_dir / "visualizations_ascii.txt"
    
    with open(viz_path, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("  VISUALIZA√á√ÉO DE MELHORIAS (MAPE %)\n")
        f.write("=" * 80 + "\n\n")
        
        max_improvement = comparison_df['Melhoria_MAPE_%'].max()
        
        for _, row in comparison_df.iterrows():
            improvement = row['Melhoria_MAPE_%']
            bar_length = int((improvement / max_improvement) * 40)
            bar = "‚ñà" * bar_length
            
            f.write(f"{row['Maturidade']:<10} | ")
            f.write(f"{bar:<40} | ")
            f.write(f"{improvement:>6.2f}%\n")
        
        f.write("\n" + "=" * 80 + "\n")
    
    print(f"‚úì Visualiza√ß√£o ASCII salva: {viz_path}")
    
    # Tamb√©m imprimir no console
    print("\n" + "=" * 80)
    print("  VISUALIZA√á√ÉO DE MELHORIAS (MAPE %)")
    print("=" * 80 + "\n")
    
    for _, row in comparison_df.iterrows():
        improvement = row['Melhoria_MAPE_%']
        bar_length = int((improvement / max_improvement) * 40)
        bar = "‚ñà" * bar_length
        
        print(f"{row['Maturidade']:<10} | {bar:<40} | {improvement:>6.2f}%")
    
    print("\n" + "=" * 80 + "\n")


def generate_full_report():
    """Main function to generate complete report."""
    print("\n" + "=" * 80)
    print("  GERADOR DE RELAT√ìRIOS E VISUALIZA√á√ïES")
    print("=" * 80 + "\n")
    
    # Criar diret√≥rio de sa√≠da
    output_dir = create_results_directory()
    print(f"Diret√≥rio de sa√≠da: {output_dir}\n")
    
    # Isto √© um modelo - os dados reais viriam da compara√ß√£o de modelos
    print("NOTA: Este √© um script template.")
    print("Para uso real, execute: python main_comparison.py\n")
    
    # Exemplo de uso com dados fict√≠cios
    print("Exemplo de uso:")
    print("-" * 80)
    print("""
from loaders.csv_loader import CsvLoader
from predictor.next_step_predictor import NextStepPredictor
from improved_predictor import ImprovedPredictor
from generate_report import *

# Load data
loader = CsvLoader()
data = loader.load_prices()

# Split data
train_size = int(len(data) * 0.8)
train_data = data.iloc[:train_size]
test_data = data.iloc[train_size:]

# Initialize and evaluate models
baseline = NextStepPredictor(data=train_data)
improved = ImprovedPredictor(data=train_data)
improved.fit()

baseline_results = baseline.evaluate_prediction(test_data, steps=3)
improved_results = improved.evaluate_prediction(test_data, steps=3)

# Generate reports
output_dir = create_results_directory()
comparison_df = export_comparison_table(baseline_results, improved_results, output_dir)
summary = create_summary_statistics(comparison_df, output_dir)
create_markdown_report(comparison_df, summary, output_dir)
create_text_visualizations(comparison_df, output_dir)

# Export predictions
baseline_pred = baseline.predict_next_step(steps=4)
improved_pred = improved.predict_next_step(steps=4)
export_predictions(baseline_pred, improved_pred, output_dir)
    """)
    print("-" * 80)
    
    print(f"\n‚úì Template de relat√≥rio criado em: {output_dir}")
    print("‚úì Execute main_comparison.py para gerar relat√≥rios reais\n")


if __name__ == "__main__":
    generate_full_report()